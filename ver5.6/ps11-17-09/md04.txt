( Control for HEFT CZT readout using MISC8n )

HERE 3 CODEADR0 !		( mark start of HEFT code section )

: H. $25 @ >R $10 $25 ! 7 U.R R> $25 ! ;
: J R> R> R> dup sta >R >R >R lda ;
: CHKSUM@ 												( stadr endadr -- cksum )
	OVER - >R sta 0 R> FOR ldp + NEXT ;
: CHKS@ 0												( -- cksum )
	3 FOR I CODEADR0 @ I CODEADR1 @ 1- CHKSUM@ DUP I CODECHKS ! + NEXT ;
: CHKS
	CHKS@ 
	3 FOR CR 3 I - DUP CODEADR0 @ H. DUP CODEADR1 @ H. CODECHKS @ H. NEXT
	CR H. ;

: EVSTAT@ g0@ $8000 AND ;

: OU4 DUP [ 4 ] G! RG4 ! ;
: OU4S DUP RG4 ! [ 4 ] G! 99 >R [ anew 4 ] G@ times
	98 FOR OR NEXT 8 AND IF NTRIG 1+! ELSE NOTRIG 1+! THEN ;
: OU5 DUP [ 5 ] G! RG5 ! ;
: OU6 DUP [ 6 ] G! RG6 ! ;
: OU7 DUP [ 7 ] G! RG7 ! ;
: OU8 DUP [ 8 ] G! RG8 ! ;
: OU9 DUP [ 9 ] G! RG9 ! ;

: PRECHH RG4 @ $FFFFEF AND $10 XOR OU4 ;
: PRECHL RG4 @ $FFFFEF AND OU4 ;
: CCLKH RG4 @ $FFFFF7 AND 8 XOR OU4 ;
: CCLKL RG4 @ $FFFFF7 AND OU4 ;
: CMDCLK RG4 @ $FFFFF7 AND DUP 8 XOR [ 4 ] G! OU4 ;
: CDATAH RG4 @ $FFFFFB AND 4 XOR OU4 ;
: CDATAL RG4 @ $FFFFFB AND OU4 ;
: CBIT IF CDATAH ELSE CDATAL THEN CMDCLK 44 FOR NEXT ;

: TPULH RG4 @ $FFBFFF AND $4000 XOR OU4S ;
: TPULL RG4 @ $FFBFFF AND OU4 ;
: CPRSTH RG4 @ $FFF7FF AND $800 XOR OU4 ;
: CPRSTL RG4 @ $FFF7FF AND OU4 ;
: CPRST CPSEL @ IF CPRSTH CPRSTL THEN ;
( : PSTTRKH RG4 @ $FFFBFF AND $400 XOR OU4 ;
: PSTTRKL RG4 @ $FFFBFF AND OU4 ;
: STANRST RG4 @ $FFF3FF AND $800 XOR OU4 ; 						swapped STAN and END words for new PCB
: ENDARST RG4 @ $FFF3FF AND $400 XOR OU4 ; ) ( for nustar/heft FPM STANRST and ENDARST replaced by
																PRERSTH and PRERSTL respectively )
: LRSTH RG4 @ $FFDFFF AND $2000 XOR OU4 ;
: LRSTL RG4 @ $FFDFFF AND OU4 ;
( : CMDBAUDH RG4 @ $FBFFFF AND $40000 XOR OU4 ; )
( : TXDBAUD! 3 AND RR8 2* 2* 2* RG4 @ $E7FFFF AND XOR OU4 ;	set high speed data baud rate )
																		( 0 => 115.2K, 1 => 230.4K, 2 => 460.8k, 3 => 921.6K )
( : HOLDBITH RG4 @ $DFFFFF AND $200000 XOR OU4 ;
: HOLDBITL RG4 @ $DFFFFF AND OU4 ;
: HOLDH RG4 @ $BFFFFF AND $400000 XOR OU4 ; )  ( used with misc8o to synchronize test pulse )
: COL! $3F AND DUP COLSEL ! [ 5 ] G! ;
: ROW! $1F AND DUP >R ROWSEL ! RG4 @ $FFFC1F AND R> 2* 2* 2* 2* 2* XOR OU4 ;
: FULLCMD RG4 @ $FFFFDF AND OU4 ;
: REGONLY RG4 @ $FFFFDF AND $20 XOR OU4 ;
: DT! $7 AND DUP >R DT ! RG6 @ $FFC7FF AND R> RR8 RR8 2* 2* 2* XOR OU6 ;				( replaces TSEL! )
: ADCCLKH RG4 @ $FFFFFD AND 2 XOR OU4 ;
: ADCCLKL RG4 @ $FFFFFD AND OU4 4 FOR NEXT ;
: ADCTESTH RG4 @ $FFFBFF AND $400 XOR OU4 ;
: ADCTESTL RG4 @ $FFFBFF AND OU4 ;
( : ADC@ RG4 @ $FFFFFD AND DUP >R DUP RG4 ! 2 OR [ 4 ] G!  
   29 FOR NEXT [ 4 ] G@ $3FFF AND $2000 XOR R> [ 4 ] G! ; )
: ADCCLRH RG4 @ $FFFFFE AND 1 XOR OU4 ;
: ADCCLRL RG4 @ $FFFFFE AND OU4 ;
: SW0H RG4 @ $FF7FFF AND $8000 XOR OU4 ;
: SW0L RG4 @ $FF7FFF AND OU4 ;
: SW1H RG4 @ $FEFFFF AND $10000 XOR OU4 ;
: SW1L RG4 @ $FEFFFF AND OU4 ; 
: SW2H RG4 @ $FDFFFF AND $20000 XOR OU4 ;
: SW2L RG4 @ $FDFFFF AND OU4 ;
: SW3H RG4 @ $FBFFFF AND $40000 XOR OU4 ;
: SW3L RG4 @ $FBFFFF AND OU4 ;
: ADCGOH	RG4 @ $F7FFFF AND $80000 XOR OU4 ;
: ADCGOL RG4 @ $F7FFFF AND OU4 ;
: IADCGOP RG4 @ $EFFFFF AND DUP $100000 XOR [ 4 ] G! [ 4 ] G! ;
: IADONE? [ 4 ] G@ $100 AND ;
( : AINITH RG6 @ $FFFFFE AND 1 XOR OU6 ;												replaces PRERDH
: AINITL RG6 @ $FFFFFE AND OU6 ;															replaces PRERDL )
: UPCHENH RG6 @ $FFFFBF AND $40 XOR OU6 ;
: UPCHENL RG6 @ $FFFFBF AND OU6 ;
: UPCHENBH RG6 @ $FFFF7F AND $80 XOR OU6 ;
: UPCHENBL RG6 @ $FFFF7F AND OU6 ;
: UPSELH RG6 @ $FFFFEF AND $10 XOR OU6 ;
: UPSELL RG6 @ $FFFFEF AND OU6 ;
: UPCLKH RG6 @ $FFFFDF AND $20 XOR OU6 ;
: UPCLKL RG6 @ $FFFFDF AND OU6 ;
: UPCLKP RG6 @ $FFFFDF AND DUP $20 OR [ 6 ] G! OU6 ;
: UPECLKP RG6 @ $40000 OR $FFFFDF AND DUP $20 OR [ 6 ] G! OU6 ;
: UPBCLKP RG6 @ $FBFFFF AND $FFFFDF AND DUP $20 OR [ 6 ] G! OU6 ;
: NCTCLKP RG6 @ $20000 OR DUP $FFFFDF AND DUP $20 OR DUP $FDFFFF AND 
        [ 6 ] G! [ 6 ] G! [ 6 ] G! OU6 ;
: UPLOCKH RG6 @ $FFBFFF AND $4000 OR OU6 ;
: UPLOCKL RG6 @ $FFBFFF AND OU6 ;
: UPRSENH RG6 @ $FEFFFF AND $10000 OR OU6 ;
: UPRSENL RG6 @ $FEFFFF AND OU6 ;
: UPCTENH RG6 @ $FDFFFF AND $20000 XOR OU6 ;
: UPCTENL RG6 @ $FDFFFF AND OU6 ;
: UPCHCTH RG6 @ $FDFFBF AND $20040 XOR OU6 ;
: UPCHCTL RG6 @ $FDFFBF AND OU6 ;
: UPREADH RG6 @ $FBFFFF AND $40000 XOR OU6 ;
: UPREADL RG6 @ $FBFFFF AND OU6 ;
: XDISCRH RG4 @ $DFFFFF AND $200000 XOR OU4 ;
: XDISCRL RG4 @ $DFFFFF AND OU4 ;
: UPTRIGH RG6 @ $FFFFF7 AND 8 XOR OU6 ;
: UPTRIGL RG6 @ $FFFFF7 AND OU6 ;
: UPTRIGP RG6 @ $FFFFF7 AND DUP RG6 ! DUP 8 XOR [ 6 ] G! [ 6 ] G! ;
: EINITH RG6 @ $FFFFFD AND 2 XOR OU6 ;
: EINITL RG6 @ $FFFFFD AND OU6 ;
: EINITP RG6 @ $FFFFFD AND DUP 2 XOR [ 6 ] G! OU6 ;					( replaces GO )
( : CLRCNTH RG6 @ $FFFFFB AND 4 XOR OU6 ;									replaces ARSTH 
: CLRCNTL RG6 @ $FFFFFB AND OU6 ;											replaces ARSTL )
: FREQ! $7F AND DUP FREQ ! OU8 ;
: CLKON RG6 @ $FFFBFF AND $400 XOR OU6 ;
: CLKOFF RG6 @ $FFFBFF AND OU6 ;
: TRGENH -1 TRIGA ! RG6 @ $DFFFFF AND $200000 XOR OU6 ;
: TRGENL 0 TRIGA ! RG6 @ $DFFFFF AND OU6 ;

: DACCLKH RG7 @ $FFFFFE AND 1 XOR OU7 ;
: DACCLKL RG7 @ $FFFFFE AND OU7 ;
: DACDATH RG7 @ $FFFFFD AND 2 XOR OU7 ;
: DACDATL RG7 @ $FFFFFD AND OU7 ;
: DACCSH RG7 @ $FFFFFB AND 4 XOR OU7 ;
: DACCSL RG7 @ $FFFFFB AND OU7 ;
: DACBIT IF 2 ELSE 0 THEN RG7 @ $FFFFFC AND XOR DUP [ 7 ] G! 
	DUP 1 XOR [ 7 ] G! [ 7 ] G! ;
: DAC! DACCSH $FFFF AND 15 FOR DUP $8000 AND DACBIT 2* NEXT DROP DACCSL ;
: NDAC! $FFFF AND [ 9 ] G! ;
: DCENH RG7 @ $FFFFF7 AND 8 XOR OU7 ;
: DCENL RG7 @ $FFFFF7 AND OU7 ;
: DCSEL! 7 AND 2* 2* 2* 2* RG7 @ $FFFF8F AND XOR OU7 ;

: MDATAH RG7 @ $FFFFF7 AND $8 XOR OU7 ;
: MDATAL RG7 @ $FFFFF7 AND OU7 ;
: MCLKH RG7 @ $FFFFEF AND $10 XOR OU7 ;
: MCLKL RG7 @ $FFFFEF AND OU7 ;
: MLOADH RG7 @ $FFFFDF AND $20 XOR OU7 ;
: MLOADL RG7 @ $FFFFDF AND OU7 ;

: MSET MDATAH MCLKH MLOADH ;
( : MLOAD MLOADL MLOADH FOR NEXT MLOADL ; )
: MLOAD MLOADH MLOADL MLOADH ;
( : MCLK RG7 @ $FFFFEF AND DUP $10 XOR [ 7 ] G! OU7 ; )
: MCLK RG7 @ $FFFFEF AND $10 XOR DUP $FFFFEF AND [ 7 ] G! OU7 ;
( : MBIT IF MDATAH ELSE MDATAL THEN MCLK 44 FOR NEXT ; )
: MBIT IF MDATAL ELSE MDATAH THEN MCLK 44 FOR NEXT ;
: MCMD! MUXSET @ 7 FOR DUP $80 AND MBIT 2* NEXT DROP MLOAD ;

: PAWZ PAWZ1 @ FOR NEXT ;
: DVM1 $07 AND $00 OR MUXSET ! MCMD! ;
: DVM2 $07 AND $08 OR MUXSET ! MCMD! ;
: DVM3 $07 AND $10 OR MUXSET ! MCMD! ;
: DVM4 $07 AND $18 OR MUXSET ! MCMD! ;
: DVM5 $07 AND $20 OR MUXSET ! MCMD! ;
: SCOPEDC $07 AND $28 OR MUXSET ! MCMD! ;


: CNVSTL RG7 @ $FFFFBF AND $40 XOR OU7 ;
: CNVSTH RG7 @ $FFFFBF AND OU7 ;
: SDCLKH RG7 @ $FFFF7F AND $80 XOR OU7 ;
: SDCLKL RG7 @ $FFFF7F AND OU7 ;
: SDCLK RG7 @ $FFFF7F AND DUP $80 XOR [ 7 ] G! OU7 ;

: SDBIT@ [ 4 ] G@ RR8 2/ 1 AND ;
: SDADC@ CNVSTL 78 FOR NEXT 0 15 FOR SDCLK 2* SDBIT@ OR NEXT CNVSTH ;
: NSDADC@
	0
	NSDADC @ 1- FOR SDADC@ + NEXT
	NSDADC @ / ;
: AVE 0 99 FOR SDADC@ + PAWZ NEXT . ;
: AVEFP 0 99 FOR SDADC@ + PAWZ NEXT DUP I>F 100.0 F/ F. ."  " I>F 100.0 F/ 0.0001526 F* F. ;
: FPC DUP . I>F 0.0001526 F* ."  " F. ;
: FIT 0 99 FOR SDADC@ + PAWZ NEXT ( DUP I>F 100.0 F/ F. ."  " ) I>F 100.0 F/ 13.25 F- 6550.135 F/ F. ;
: AD>V I>F 13.25 F- 6550.135 F/ ;


: ADCTEMP CR 5 DVM5 PAWZ SDADC@ I>F 0.0001526 F* 0.311 F- 100. F* 25.0 F+ ." ADCTEMP " F. ." DEG C " CR ; 


: DVM1DAT CR 100000 PAWZ1 !
	0 DVM1 PAWZ  ." SCOPEBIAS  "  FIT CR
	1 DVM1 PAWZ  ." 5VREF      "  FIT CR
	2 DVM1 PAWZ  ." DISCTHRESH "  FIT CR
	3 DVM1 PAWZ  ." DISCREF    "  FIT CR 1000000 PAWZ1 !
	4 DVM1 PAWZ  ." VREFLOAD   "  FIT CR 100000 PAWZ1 !
	5 DVM1 PAWZ  ." VREF       "  FIT CR
	6 DVM1 PAWZ  ." 4VREF      "  FIT CR
	7 DVM1 PAWZ  ." 1VREF      "  FIT CR ;

: DVM2DAT CR 100000 PAWZ1 !
	0 DVM2 PAWZ  ." VPS1       "  FIT CR
	1 DVM2 PAWZ  ." VPL3       "  FIT CR
	2 DVM2 PAWZ  ." VPL2       "  FIT CR
	3 DVM2 PAWZ  ." VPB2       "  FIT CR
	4 DVM2 PAWZ  ." VPB1       "  FIT CR
	5 DVM2 PAWZ  ." VP2        "  FIT CR
	6 DVM2 PAWZ  ." VP1        "  FIT CR
	7 DVM2 PAWZ  ." VNL2       "  FIT CR ;

: DVM3DAT CR 100000 PAWZ1 !
	0 DVM3 PAWZ  ." VNL1       "  FIT CR
	1 DVM3 PAWZ  ." VN3        "  FIT CR
	2 DVM3 PAWZ  ." VN2        "  FIT CR
	3 DVM3 PAWZ  ." VNB1       "  FIT CR
	4 DVM3 PAWZ  ." VN1A       "  FIT CR
	5 DVM3 PAWZ  ." VN1        "  FIT CR
	6 DVM3 PAWZ  ." VLEAK      "  FIT CR
	7 DVM3 PAWZ  ." TESTREF    "  FIT CR ;

: DVMPWR CR 100000 PAWZ1 !
	0 DVM4 PAWZ  ." IA5V+      "  FIT CR
	0 DVM5 PAWZ  ." IA5V-      "  FIT CR
	1 DVM4 PAWZ  ." A5V        "  FIT CR
	2 DVM4 PAWZ  ." IPRE5V+    "  FIT CR
	2 DVM5 PAWZ  ." IPRE5V-    "  FIT CR
	3 DVM4 PAWZ  ." PREV5      "  FIT CR
	4 DVM4 PAWZ  ." ID5V+      "  FIT CR
	4 DVM5 PAWZ  ." ID5V-      "  FIT CR 
	5 DVM4 PAWZ  ." D5V        "  FIT CR
	6 DVM4 PAWZ  ." ID3.3V+    "  FIT CR
	6 DVM5 PAWZ  ." ID3.3V-    "  FIT CR
	7 DVM4 PAWZ  ." IOVDD      "  FIT CR
	7 DVM5 PAWZ  ." GUARDBIAS  "  FIT CR ;

: T9! $FF AND DUP T9 ! RR8 RR8 RG7 @ $FF00FF AND XOR OU7 ;
: T10! $FF AND DUP T10 ! RR8 RG7 @ $FFFF AND XOR OU7 ;

: DISC@ [ 4 ] G@ RR8 RR8 7 AND ;
( : DISCB@ [ 4 ] G@ RR8 2/ 2/ 2/ 2/ 7 AND 7 XOR ; )
: TRIGA@ [ 4 ] G@ $4000 AND ;
: TRIGB@ [ 4 ] G@ $8000 AND ;
: SHLD@ [ 5 ] G@ RR8 $FF AND ;
: TIM@ [ 5 ] G@ $F AND ;
: TAGS@ [ 5 ] G@ ;
: CTRCLRH RG4 @ $FFEFFF AND $1000 XOR OU4 ;
: CTRCLRL RG4 @ $FFEFFF AND OU4 ;

: EVTIME@ [ 12 ] G@ ;
: SH@ [ 9 ] G@ ;
: CZ@ [ 8 ] G@ ;
: LT@ [ 7 ] G@ ;

( timer control )

: ITIM@ [ 15 ] G@ ;
: ITIM! [ 15 ] G! ;
: LD-ITIM $3000 [ 0 ] G! ;
: ETIM@ [ 10 ] G@ ;
( : CLR-IFRM $4000 [ 9 ] G! ; )

: RTIM@ [ 14 ] G@ ;
: RTIM! [ 14 ] G! ;
: LD-RTIM $5000 DUP [ 0 ] G! ;

: STIM@ [ 13 ] G@ ;
: STIM! [ 13 ] G! ;
: LD-STIM $9000 [ 0 ] G! ;

: BSET 1 SWAP ?DUP IF 1- FOR 2* NEXT THEN OR ;
: BCLR 1 SWAP ?DUP IF 1- FOR 2* NEXT THEN NOT AND ;
: D2* 2* -IF >R 2* 1 XOR ELSE >R 2* THEN R> ;
: D2/ >R DUP 1 AND 
	IF 2/ R> 2/ $7FFFFF AND $800000 XOR
	ELSE 2/ R> 2/ $7FFFFF AND
	THEN ;
: DOR >R sta R> OR >R lda OR R> ;
: DNOT NOT >R NOT R> ;
: DAND >R sta R> AND >R lda AND R> ;
: DBSET ?DUP IF >R 0 1 R> 1- FOR D2* NEXT ELSE 0 1 THEN DOR ;
: DBCLR ?DUP IF >R 0 1 R> 1- FOR D2* NEXT ELSE 0 1 THEN DNOT DAND ;
: D@ sta ldp >R ld R> ;
: D! sta stp st ;

: ALLON 63 FOR $FFFFFF I PIXEN + ! NEXT ;							( enable all pixels vlsi a )
: ALLOFF 63 FOR 0 I PIXEN + ! NEXT ;								( disable all pixels vlsi a )

: ENPIX SWAP																( > col# row# ENPIX enables pixel )
	$1F AND >R 																( col# to ret stk )
	$1F AND 2* PIXEN + DUP TMPAD !									( row# used to address array )
	D@ R> DBSET TMPAD @ D! ;

: DISPIX	SWAP																( > col# row# DISPIX disables pixel )
	$1F AND >R 																( col# to ret stk )
	$1F AND 2* PIXEN + DUP TMPAD !									( row# used to address array )
	D@ R> DBCLR TMPAD @ D! ;

: PREG!
	1 FOR 0 CBIT NEXT
	VNL1SEL @ 1 FOR DUP 2 AND CBIT 2* NEXT DROP
	VPL3SEL @ 3 FOR DUP 8 AND CBIT 2* NEXT DROP
	VPL2SEL @ 3 FOR DUP 8 AND CBIT 2* NEXT DROP
	4VSEL @ 6 FOR DUP $40 AND CBIT 2* NEXT DROP
	4VADJEN* @ CBIT
	CPSEL @ CBIT
	INTADCEN @ CBIT
	DISCSET @ 7 FOR DUP $80 AND CBIT 2* NEXT DROP
	OFFSET @ 1 FOR DUP 2 AND CBIT 2* NEXT DROP
	EXTADCEN @ CBIT
	GAINSEL @ 1 FOR DUP 2 AND CBIT 2* NEXT DROP
	SCOPEN* @ CBIT
	SCOPSEL @ 1 FOR DUP 2 AND CBIT 2* NEXT DROP
	SROWSEL @ 4 FOR DUP $10 AND CBIT 2* NEXT DROP
	SCOLSEL @ 4 FOR DUP $10 AND CBIT 2* NEXT DROP
	TPULR D@ 31 FOR OVER $80 AND CBIT D2* NEXT DROP DROP
	TPULC D@ 31 FOR OVER $80 AND CBIT D2* NEXT DROP DROP ;

: REG! REGONLY PREG! ;

: CMD! FULLCMD
	15 FOR 
		15 I - 2* 2* PIXEN + D@
		31 FOR DUP 1 AND CBIT D2/ NEXT DROP DROP
		15 I - 2* 2* 2 + PIXEN + D@
		31 FOR OVER $80 AND CBIT D2* NEXT DROP DROP
	NEXT
	PREG! ;

: XYONSEL OVER OVER ENPIX						( turns on pixel, enables pulsing and scope )
	DUP ROWSEL ! DUP SROWSEL ! DUP ROW! >R 0 0 R> DBSET TPULR D!
	DUP COLSEL ! DUP SCOLSEL ! DUP COL! >R 0 0 R> DBSET TPULC D!
	CMD! ;

: XYSEL												( enables pulsing and scope for selected pixel )
	DUP ROWSEL ! DUP SROWSEL ! DUP ROW! >R 0 0 R> DBSET TPULR D!
	DUP COLSEL ! DUP SCOLSEL ! DUP COL! >R 0 0 R> DBSET TPULC D!
	REG! ;

: RECT-EN1 ALLOFF
	ROW-HI @ ROW-LOW @ - FOR
	COL-HI @ COL-LOW @ - FOR
		I COL-LOW @ + J ROW-LOW @ + ENPIX NEXT NEXT ;

: PAUS NPAUS @ FOR NEXT ;
: ONE-EV EINITH EINITL PAUS UPTRIGP ;
: ETEST FOR 99 FOR ONE-EV PAUS NEXT NEXT ;

: DVMSCOPE CR 100000 PAWZ1 !
	SCOPEDC 0 SCOPSEL ! CMD! PAWZ  ." DISCR IN     " FIT CR
	SCOPEDC 2 SCOPSEL ! CMD! PAWZ  ." LEAK MON OUT " FIT CR
	SCOPEDC 3 SCOPSEL ! CMD! PAWZ  ." SHAPE OUT    " FIT CR
	SCOPEDC 1 SCOPSEL ! CMD! PAWZ  ." PREAMP OUT   " FIT CR ;

: DVMDISC CR DISCSET @ 100000 PAWZ1 !
	2 DVM1 ." DISCTHRESH VERSUS SETTING " CR
	0 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	1 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	2 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	4 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	8 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	16 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	32 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	64 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	128 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR
	255 DUP 4 U.R DISCSET ! CMD! PAWZ FIT CR 
	DISCSET ! CMD! ;

: DVMVPL2 CR VPL2SEL @ 100000 PAWZ1 !
	2 DVM2 ." VPL2 VERSUS SETTING " CR
	15 FOR 15 I - DUP 4 U.R VPL2SEL ! CMD! PAWZ FIT CR NEXT 
	VPL2SEL ! CMD! ;

: DVMVPL3 CR VPL3SEL @ 100000 PAWZ1 !
	1 DVM2 ." VPL3 VERSUS SETTING " CR
	15 FOR 15 I - DUP 4 U.R VPL3SEL ! CMD! PAWZ FIT CR NEXT 
	VPL3SEL ! CMD! ;

: DVM4VREF CR 4VSEL @ 100000 PAWZ1 !
	6 DVM1 ." 4VREF VERSUS SETTING " CR
	0 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	1 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	2 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	4 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	8 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	16 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	32 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	64 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	127 DUP 4 U.R 4VSEL ! CMD! PAWZ FIT CR
	4VSEL ! CMD! ;

: DVMVNL1 CR VNL1SEL @ 100000 PAWZ1 !
	0 DVM3 ." VNL1 VERSUS SETTING " CR
	3 FOR 3 I - DUP 4 U.R VNL1SEL ! CMD! 299 FOR PAWZ NEXT FIT CR NEXT 
	VNL1SEL ! CMD! ;

: DVMVNL2 CR VNL1SEL @ OFFSET @ 100000 PAWZ1 !
	7 DVM2 ." VNL2 VERSUS SETTING " CR
	3 FOR 3 I - VNL1SEL !
		3 FOR VNL1SEL @ 4 U.R 3 I - DUP 4 U.R OFFSET ! CMD! 299 FOR PAWZ NEXT FIT CR 
		NEXT
	NEXT
	OFFSET ! VNL1SEL ! CMD! ;

: INIT $7FFFFF ITIM! ADCCLKH T9 @ T9! T10 @ T10! SW0H
	-1 INTADCEN ! 0 EXTADCEN ! 0 SCOPEN* ! ALLON 0 0 XYONSEL ;

4 . HERE .


