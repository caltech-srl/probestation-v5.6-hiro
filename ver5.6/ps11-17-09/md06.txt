HERE 5 CODEADR0 !		( mark start of HEFT code section )

: LOOK	( x y -- )									( selects a particular pixel for pulsing )
	UPLOCKL LRSTH UPREADH UPSELH
	$7FFFFF ITIM! ADCCLKH ADCCLRH
	ALLOFF
	OVER OVER ENPIX XYONSEL 1 ( TRY5 ) TRY4 ;
VARIABLE NRSCAN 250 NRSCAN !
: RSCAN ( y -- ) >R
	31 FOR 31 I - J XYSEL 0 TRY5 NEXT R> DROP ;
: CSCAN CR 31 FOR 31 I - DUP . RSCAN NEXT ;
 
( randomized interrupt driven stim pulser )

: RAND@ RAND @ 6205 * 3960563 + DUP RAND ! $7FFFFF AND RSCALE @ FOR 2/ NEXT ;
: STIMGEN 
	OFFFLG @
	IF
		UPTRIGH 30US UPTRIGL OFFTOG @ IF 0 OFFFLG ! THEN
	ELSE
		( HOLDFLG @ IF HOLDH DTIM @ FOR NEXT THEN ) ( to synchronize test pulse )
		TPULH 30US TPULL RANDFLG @ IF STIMLEN @ RAND@ + STIM! THEN
		OFFTOG @ IF -1 OFFFLG ! THEN
	THEN ;
: -STIM -INT g0@ $FBF AND g0! +INT ;
: STIM 6 ASSIGN
	lda -IF -1 ELSE 0 THEN
	STIM@ DROP
	STIMFLG @ IF STIMGEN THEN
	( SPAUSFLG @ 
		IF SPAUSCNT 1+!
			SPAUSCNT @ SPAUSLIM @ >
			IF 0 SPAUSFLG ! THEN
		ELSE ) STIMCNT 1+!
		( THEN )
	shl drop sta rti ;
: +STIM STIM g0@ $FBF AND $40 XOR g0! ;


: SETUP -STIM TRGENL ALLOFF 1 1 XYSEL +STIM +INT ;

ARRAY ROWIND 31 , 28 , 25 , 22 , 19 , 16 , 13 , 10 , 7 , 4 , 1 ,

: DISCOL@ 
	0 ROWINDP sta
	0 $70
	2 FOR
		ldp [ 4 ] G! 
		>R 2* 2* 2* R>
		NOT $70 AND 2/ 2/ 2/ 2/ XOR
		[ 4 ] G@  
	NEXT 
		>R 2* 2* 2* R>
		NOT $70 AND 2/ 2/ 2/ 2/ XOR	
	0 0
	7 FOR 
		ldp [ 4 ] G! 
		>R 2* 2* 2* R>
		NOT $70 AND 2/ 2/ 2/ 2/ XOR
		[ 4 ] G@  
	NEXT 
		>R 2* 2* 2* R>
		NOT $70 AND 2/ 2/ 2/ 2/ XOR ;

( : DISCOL@B 0 ROWINDP sta
        0 7 FOR 2* 2* 2* ldp [ 4 ] G! [ 4 ] G@ NOT
        $7000 AND RR8 2/ 2/ 2/ 2/ XOR NEXT ; )

: DBPREP 10 FOR RG4 @ $FFFC1F AND I ROWIND @ 2* 2* 2* 2* 2* OR I ROWINDP ! NEXT ;

: DBITS@ 0 NCOL ! DBPREP 
	31 FOR I COL! DISCOL@ OVER OVER I 2* DBITS D! OR IF  NCOL 1+! THEN
			( I 7 AND IF ELSE CPRST THEN )
		NEXT ;



( : DBITS@B 0 NCOL ! DBPREP 47 FOR I COL! DISCOL@B DUP I DBITS ! IF  NCOL 1+! THEN NEXT ; )

: TROW. >R 0 0 R> DBSET
        31 FOR $20 EMIT OVER OVER 31 I - 2* TBITS D@ DAND OR IF $58 EMIT ELSE $2E EMIT THEN NEXT DROP DROP ;
: PROW. 31 FOR $20 EMIT OVER OVER 1 AND IF $58 EMIT ELSE $2E EMIT THEN DROP D2/ NEXT DROP DROP ;
: HEADING CR $20 EMIT $20 EMIT 31 FOR $20 EMIT 31 I - 10 /MOD DROP $30 + EMIT NEXT ;
: TBITS. HEADING 31 FOR CR 31 I - DUP 2 U.R TROW. NEXT ; ( as viewed from gamma src. )
: PIX. HEADING 31 FOR CR 31 I - DUP 2 U.R 2* PIXEN + D@ PROW. NEXT ;
: DBITS. 0 DBITS 0 TBITS 64 MOVE TBITS. ;
: SBITS. 0 SBITS 0 TBITS 64 MOVE TBITS. ;
: OBITS. 0 OBITS 0 TBITS 64 MOVE TBITS. ;
: OBITS2. 0 OBITS2 0 TBITS 64 MOVE TBITS. ;
: DBITS? DBITS@ DBITS. ;
: DSPREAD OVER OVER D2* DOR OVER OVER D2/ DOR ;
: SPREADY 31 FOR I 2* SBITS DUP >R D@ DSPREAD R> D! NEXT ;
: SPREADX 
	[ 60 DBITS ] ldi sta
	ldp >R ldp R> 
	ldp >R ld R>
	DOR 
	[ 62 SBITS ] ldi D!
	29 FOR 
		I 2* DBITS sta 
		ldp >R ldp R> 
		ldp >R ldp R>
		ldp >R ld R> 
		DOR DOR 
		I 1+ 2* SBITS D! 
	NEXT
   [ 0 DBITS ] ldi sta 
	ldp >R ldp R> 
	ldp >R ld R>
	DOR
	[ 0 SBITS ] ldi D! ;
	
: ZOBITS 63 FOR 0 I OBITS ! NEXT ;
: ORBITS NCOL @ 23 < IF [ 0 DBITS ] ldi [ 0 OBITS ] ldi 64 ORMOVE THEN ;
: ZCHIST 15 FOR 0 I CHIST ! NEXT ;
( : ZWCHIST 15 FOR 0 I WCHIST ! NEXT ; )
: CHIST+ $F AND CHIST 1+! ;
( : WCHIST+ $F AND WCHIST 1+! ; )
: CHIST. 15 FOR 15 I - DUP CR . CHIST ? NEXT ;
( : WCHIST. 15 FOR 15 I - DUP CR . WCHIST ? NEXT ; )

: REF-OR REFCOL# @ DBITS DUP >R @ REFROW# @ BSET R> ! ; 
: OFF-OR OFFCOL# @ DBITS DUP >R @ OFFROW# @ BSET R> ! ;

: OFFEV? TAGS @ $3E000 AND ;

VARIABLE COLCNT
VARIABLE ROWCNT
VARIABLE 1HITFLG 

( : ONEHIT? 0 COLCNT ! -1 1HITFLG !
	[ 0 DBITS ] ldi sta
	31 FOR
		DUP D@ OVER OVER OR 
		IF 1 COLCNT +!
			COLCNT @ $FFFFFE AND IF 0 1HITFLG ! DROP DROP DROP R> DROP EXIT THEN
		ELSE
			0 ROWCNT !
			31 FOR
				DUP 1 AND
				IF 1 ROWCNT +!
					ROWCNT @ $FFFFFE AND IF 0 1HITFLG ! DROP DROP DROP R> DROP EXIT THEN
				ELSE D2/
				THEN
			NEXT DROP DROP
		THEN
		2 + 
	NEXT DROP ; )

CREATE RDATA 
	$200800 , ( reg 4 , RDRSTL )
	$200802 , ( reg 4 , ADCONVH )
	$200800 , ( reg 4 , ADCONVL )
	$64410 ,  ( reg 6 , CTRENH, plus UPCHENAH or UPCHENBH added later )
	$64430 ,  ( reg 6 , UPCLKH )
	$64410 ,  ( reg 6 , UPCLKL )
	$44410 ,  ( reg 6 , CTRENL, plus UPCHENAL or UPCHENBL added later )
	$44430 ,  ( reg 6 , UPCLKH )
	$44410 ,  ( reg 6 , UPCLKL )
	$200802 , ( reg 4 , ADCONVH )
	$200800 , ( reg 4 , ADCONVL )
	$200810 , ( reg 4 , RDRSTH )

: RDATAROW!
	2* 2* 2* 2* 2*
	RDATA sta
	ld $FFFC1F AND OVER XOR stp
	ld $FFFC1F AND OVER XOR stp
	ld $FFFC1F AND OVER XOR st
	[ RDATA 9 + ] ldi sta
	ld $FFFC1F AND OVER XOR stp
	ld $FFFC1F AND OVER XOR stp
	ld $FFFC1F AND XOR st ;

: FIXRDATA
	BSEL @
	IF RDATA sta
		ld $FBFFFE AND $40001 XOR stp
		ld $FBFFFE AND $40001 XOR stp
		ld $FBFFFE AND $40001 XOR st
		[ RDATA 9 + ] ldi sta
		ld $FBFFFE AND $40001 XOR stp
		ld $FBFFFE AND $40001 XOR stp
		ld $FBFFFE AND $40001 XOR st		
	ELSE 
		RDATA sta
		ld $FBFFFE AND stp
		ld $FBFFFE AND stp
		ld $FBFFFE AND st
		[ RDATA 9 + ] ldi sta
		ld $FBFFFE AND stp
		ld $FBFFFE AND stp
		ld $FBFFFE AND st
	THEN
	0
	TRIGA @ IF $200000 XOR THEN
	TRIGB @ IF $400000 XOR THEN
	DT @ RR8 RR8 2* 2* 2* XOR
	DUP BSEL @ IF $80 XOR ELSE $40 XOR THEN
	[ RDATA 3 + ] ldi sta
	DUP ld $9FC73F AND XOR stp
	DUP ld $9FC73F AND XOR stp
	ld $9FC73F AND XOR stp
	DUP ld $9FC73F AND XOR stp
	DUP ld $9FC73F AND XOR stp
	ld $9FC73F AND XOR st ;
	
( : RDPREP FIXRDATA
	TAGS @ CHIST+ DBITS@ 
	REFFLG @ IF REF-OR THEN
	OFFEV? IF OFF-OR THEN
	ORBITSA SPREADX SPREADY 0 NPIX ! ; )

: ZTHIST 255 FOR 0 I THIST ! NEXT ;
: THIST+ 44231 / $FF AND THIST 1+! ;
: THIST. 0 THIST 15 FOR CR 15 FOR @1+ SWAP 4 U.R NEXT NEXT DROP ;

: RDPREP
	TIM@ DUP CAP# ! CHIST+ 
	EVTOLD @ EVTIME @ - DUP THIST+ DEVTIME !
	DBITS@ 
	ORFLG @ IF ORBITS THEN
	MODEFLG @ 0= IF SPREADX SPREADY THEN 0 NPIX ! ;

( : PIXREAD
	0 ADCVAL
	15 FOR
		DACOFF @ NDAC! 150 FOR NEXT
		PRECHH 10 FOR NEXT PRECHL
		EADC@ OVER ! 1+
		UPCHENH UPCTENH UPCLKP
		EADC@ OVER ! 1+
		UPCHENL UPCTENL UPCLKP
	NEXT DROP ; )

: PIXREAD -INT
	0 ADCVAL
	15 FOR
		PRECHH 10 FOR NEXT PRECHL
		UPCHCTH UPCLKP UPCHCTL
		( ADC@ ) NADC@ OVER ! 1+
		UPCLKP
	NEXT DROP +INT ;

: 1CAP@		
		PRECHH 10 FOR NEXT PRECHL
		UPCHCTH UPCLKP UPCHCTL
		ADC@ UPCLKP ;

: CPIXREAD -INT
	1CAP@ DROP	( S0 )
	1CAP@ 1CAP@ + 1CAP@ + 1CAP@ + 1CAP@ + 1CAP@ DUP NEGATE >R DUP >R + 
	NPIX @ TBASE ! ( SUM S1 THROUGH S6 )
	R> DUP DUP + + ( 3*S6 )
	1CAP@ DUP + - ( -2*S7 )
	1CAP@ DUP + - ( -2*S8 )
	1CAP@ DUP + - ( -2*S9 )
	1CAP@ DUP >R DUP >R DUP DUP + + + ( +3*S10 )
	NPIX @ TRISE !
	R> + NPIX @ TDNOM !
	R> 
	

 +INT ;	

( : SAMPS! 3 ADCVAL									mod to not make baseline subtraction 03-01-07 wrc
			NPIX @ 2* 2* 2* 2* 0 SAMPS +
			15 FOR
				OVER @
				OVER !
				>R 1+ 1+ R> 1+
			NEXT DROP DROP ; )

( : SAMPS! NPIX @ 2* 2* 2* 2* 0 SAMPS +
        0 ADCVAL TMPAD !
        15 FOR TMPAD @ @1+ @1+ TMPAD ! SWAP - 2/ 2/ 2/ 2/ SWAP !1+ NEXT DROP ; )

: SAMPS! 0 ADCVAL NPIX @ 2* 2* 2* 2* 0 SAMPS + 16 MOVE ;
        
: 1PIXREAD
	RDROW# @ DUP NPIX @ ROW#S ! ROW!
	RDCOL# @ DUP NPIX @ COL#S ! COL!
	MODEFLG @
	IF 
		( CPIXREAD CDATA! )
	ELSE
		PIXREAD SAMPS! 
	THEN ;

: COLREAD
	31 FOR OVER
	$80 AND
	IF
		NPIX @ NPIXLIM @  <
		IF 
			I RDROW# ! 1PIXREAD 
			NPIX 1+!
			( CPRST )
		THEN
   THEN D2* NEXT DROP DROP ;

: WSEND BEGIN HTXDONE @ UNTIL ;
( : READOUT RDPREP WSEND 47 FOR I DUP RDCOL# ! SBITS @ COLREAD NEXT ; )

: READOUT 
	RDPREP
	ADCCLKH UPREADH UPLOCKH UPCLKL UPCHENL UPCTENL UPSELH
	31 FOR 
		I DUP RDCOL# ! 2* 
		MODEFLG @ IF DBITS ELSE SBITS THEN D@ COLREAD 
	NEXT
	MODEFLG @ IF ( MAXPIX@ 9PIXREAD ) THEN
	PRECHH UPCHENL UPCTENL UPSELL ;

: CK+ DUP CKSUM +! ;

( : EV. 0 CKSUM !
        CR NPIX @ CK+ 3 U.R CAP# @ CK+ 3 U.R
        EVTIME @ CK+ 5 U.R 
	  NPIX @ IF
        	0 SAMPS
        	NPIX @ 1- FOR
            	CR NPIX @ 1- I - DUP
            	ROW#S @ $1F AND CK+ 3 U.R COL#S @ $3F AND CK+ 3 U.R
            	15 FOR @1+ >R $FFF AND CK+ 5 U.R R> NEXT
        	NEXT DROP
	  THEN
        CR CKSUM @ $FFF AND 5 U.R CR ; )

: EV. 0 SAMPS 144 DUMP ;

: EVRTIME! RSTLEN @ SWAP - EVRTIME ! ;

: RSTSEQ -INT LRSTH EINITH ( PRERSTH RSTPAUS @ FOR NEXT
                PRERSTL CPRST ) CLKOFF CTRCLRH CTRCLRL CLKON EINITL
                PAUS1 LRSTL +INT ;

: CPRESET  
	EVFLG @ NOT DUP >R IF LRSTH THEN 
	CPRSTH CPRSTL 
	R> IF PAUS2 LRSTL THEN ;

: EV12! EVPTR @ DUP 2/ EVBUF + sta 
	1 AND 
	IF ld $FFF000 AND XOR
	ELSE RR8 RR8 2* 2* 2* 2* ld $FFF AND XOR
	THEN st 
	EVPTR 1+! ;

: DBIT@
	COLTEMP @ 2* DBITS D@
	0 0 ROWTEMP @ DBSET
	DAND 
	IF DROP 1
	ELSE
		IF 1
		ELSE 0 
		THEN 
	THEN ;

: PACKEV
	$F0AAAA EVBUF !
	EVTIME @ [ EVBUF 1+ ] ldi !
	EVRTIME @ NPIX @ RR8 XOR [ EVBUF 2 + ] ldi !
	CAP# @ [ EVBUF 3 + ] ldi ! 
	8 EVPTR ! 
	NPIX @ 
	IF
		0 SAMPS
		NPIX @ 1- 
		FOR
			NPIX @ 1- I - DUP >R
			ROW#S @ $1F AND DUP ROWTEMP !
			RR8 RR8 2/ 2/ R> 
			COL#S @ $1F AND DUP COLTEMP !
			XOR EV12!
			@1+ >R $FFE AND DBIT@ XOR EV12! R>
			14 FOR @1+ >R $FFF AND EV12! R> NEXT
		NEXT DROP
	THEN
	EVPTR @ 1 AND IF 0 EV12! THEN ;

: EVHD!+ EVHD-PTR @ $7F AND EVHDS + ! EVHD-PTR 1+! ;
: EVHD!
	EVBUF @ EVHD!+
	[ EVBUF 1+ ] ldi @ EVHD!+
	[ EVBUF 2 + ] ldi @ EVHD!+
	[ EVBUF 3 + ] ldi @ EVHD!+ ;

: HTXWORD 
	RR8 RR8 DUP 
	HTX! 
	RR8 RR8 DUP 
	HTX! 
	RR8 RR8 
	HTX! ;

: HROOM@ $7FF HTX-WPTR @ HTX-RPTR @ - - ;

: HWAIT 2 + BEGIN HROOM@ OVER > UNTIL DROP ;

: SWORD 
	RR8 RR8 DUP 
	XMT! 
	RR8 RR8 DUP 
	XMT! 
	RR8 RR8 
	XMT! ;

: XROOM@ $7FF XMT-WPTR @ XMT-RPTR @ - - ;

: SWAIT 2 + BEGIN XROOM@ OVER > UNTIL DROP ;
 
: SPACK ( address wordcnt -- )
	HTXFLG @ IF
		DUP 3 * HWAIT
		1- FOR DUP @ HTXWORD 1+ NEXT DROP -INT +HTX +INT
	ELSE
		DUP 3 * DUP SWAIT
		26 XMT! 1- XMT! 1- FOR DUP @ SWORD 1+ NEXT DROP -INT +XMT +INT
	THEN ;

VARIABLE NPACK 80 NPACK !
: SENDEV 
	EVPTR @ 2/ NPACK @ /MOD DUP 
	IF EVBUF SWAP 1- FOR DUP NPACK @ SPACK NPACK @ + ( CPRST ) NEXT
	ELSE DROP EVBUF
	THEN
	SWAP SPACK ;
	
( : DOEV THIST+ 30US PRERSTH XDISCRH PAUS9 READOUT
       XDISCRL PAUS9 PACKEV EVHD! ; )

: DOEV READOUT PACKEV EVHD! SENDEV ;

( interrupt driven preamp reset )
: URESET RSTSEQ RSTLEN @ RTIM! STIM@ DROP ;
: -RES -INT g0@ $FDF AND g0! +INT ;
: RES 5 ASSIGN
	lda -IF -1 ELSE 0 THEN
	-1 RSFLG !
	RTIM@ DROP
	CPRESET
	RESCNT 1+!
	shl drop sta rti ;
: +RES RES RSTLEN @ RTIM! -INT g0@ $FDF AND $20 XOR g0! +INT ;



( interrupt driven event handler )

: -EVT g0@ $FEF AND g0! ;

: EVT 4 ASSIGN
	lda -IF -1 ELSE 0 THEN
	( SECCNT @ EVSEC ! )
	RTIM@ ITIM@ EVTIME ! EVRTIME !	
	-STIM -EVT
	-1 EVFLG !
	EVCNT 1+!
	shl drop sta rti ;

: +EVT EVT -INT g0@ $FEF AND $10 XOR g0! +INT ;

: EVT2 4 ASSIGN
	lda -IF -1 ELSE 0 THEN
	EINITP
	EVCNT 1+!
	shl drop sta rti ;

: +EVT2 EVT2 -INT g0@ $FEF AND $10 XOR g0! +INT ;

: INITA -STIM -RES ( RDRSTH ) CLKOFF 44 FREQ! $80000 TRGMASK !
        0 DIAGFLG ! TRGENH UPTRIGL UPSELL CTRCLRL
        UPREADH UPRSENL UPCTENL UPCHENL UPCHENBL +STIM ( +RES ) ;

( : GO SETUPA SETUP +EVT ; )
: NSETUP ( 2 TXDBAUD! AT! ) 2 DT! 0 REFFLG ! ;
: GO NSETUP SETUP INITA +EVT ;
: SENDHDR MODHDR 9 ( DOHTX ) BEGIN HTXDONE @ UNTIL ;

: ALLTAGS@ 
	EVTIME@ EVTIME !
	TAGS@ TAGS ! 
	RTIM@ EVRTIME!
	-INT
	RG6 @ $FBFFEF AND 
	DUP $40000 XOR DUP >R >R
	$10 XOR
	[ anew 6 ] G! [ 4 ] G@ R> [ 6 ] G! R> RG6 !
	+INT
	TRGMASK @ AND EVAB ! ;

: SINGL?
	EVAB @
	DUP
	IF
		DUP $88000 XOR
		IF
			$8000 AND 
			IF 0 EVASIDE ! NBSIDE 1+!
			ELSE -1 EVASIDE ! NASIDE 1+!
			THEN
			-1
		ELSE
			DROP
			NBOTH 1+!
			0
		THEN
	ELSE
		DROP
		NNONE 1+!
		0
	THEN ;
			

: ACCEPT?
	TAGS @ $1F00 AND SHLDREJ @ AND							( check for shield hit )
	IF
		0
	ELSE
		SINGL?
		OFFEV? 
		IF OFFASIDE @ EVASIDE ! -1
		ELSE 0 
		THEN OR
	THEN ;

: ENERGY?
	NPIX @ 9 = 
	( TAGS @ $7C0000 AND AND )
	EVASIDE @ ECALSIDE @ = AND
	ECALFLG @ AND ;

: 1BKWAVE@ 0 			( adr -- sum )
	3 FOR OVER @ + >R 16 + R> NEXT
	>R 16 + R>
	3 FOR OVER @ + >R 16 + R> NEXT 
	>R DROP R> ;
: BKWAVE@
	[ 0 SAMPS ] ldi BKWAVE
	15 FOR OVER 1BKWAVE@ OVER ! 1+ >R 1+ R> NEXT DROP DROP ;
: DOBKSUB
	BKWAVE [ 64 SAMPS ] ldi
	15 FOR OVER @ OVER @ 2* 2* 2* - NEGATE st 1+ >R 1+ R> NEXT DROP DROP ;
: E1@ 
	[ 64 SAMPS 10 + ] ldi
	sta ldp ldp + ldp + 
	ldp + ldp + ldp +
	[ 64 SAMPS ] ldi 
	sta ldp ldp + ldp + 
	ldp + ldp + ldp + - ;
: T1@
	[ 64 SAMPS 5 + ] ldi @ [ 64 SAMPS 6 + ] ldi @ - 2*
	[ 64 SAMPS 6 + ] ldi @ [ 64 SAMPS 7 + ] ldi @ - +
	[ 64 SAMPS 9 + ] ldi @ [ 64 SAMPS 8 + ] ldi @ - + 
	[ 64 SAMPS 10 + ] ldi @ [ 64 SAMPS 9 + ] ldi @ - 2* + 
	I>F 
	[ 64 SAMPS 10 + ] ldi @ [ 64 SAMPS 5 + ] ldi @ - I>F F/ ;
: E2@ 
	[ 64 SAMPS 9 + ] ldi
	sta ldp ldp + ldp + 
	ldp + ldp + ldp + ldp +
	[ 64 SAMPS ] ldi 
	sta ldp ldp + ldp + 
	ldp + ldp + ldp + ldp + - ;
: T2@
	[ 64 SAMPS 6 + ] ldi @ [ 64 SAMPS 7 + ] ldi @ -
	[ 64 SAMPS 9 + ] ldi @ [ 64 SAMPS 8 + ] ldi @ - + 
	I>F 
	[ 64 SAMPS 9 + ] ldi @ [ 64 SAMPS 6 + ] ldi @ - I>F F/ ;
: ECAL
	BKWAVE@ DOBKSUB
	E1@ DUP ENERGY !
	DUP I>F
	T1@ OVER OVER RISETIME F!
	ECFAC F@ F* F*
	F>I - CENERGY ! ;
: DOEHIST ECAL CENERGY @ ESCALE @ FOR 2/ NEXT $FF AND EHISTA + 1+! ;

( : ZWAVES WAVES 2304 ZFILL ;
: ACCUMWV
	0 SAMPS
	TAGS @ DUP WCHIST+
	$F AND 144 * WAVES +
	143 FOR 
		OVER @ OVER @ + st 1+ >R 1+ R>
	NEXT ; )

( average and print WAVES )

( : CR? IL 1+! IL @ 16 = IF CR 0 IL ! THEN ;
: WAVES. 0 IL ! CR
	15 FOR
		I DUP CHIST @ NC !
		144 * WAVES +
		143 FOR 
			DUP @ NC @ / 6 U.R CR? 1+
		NEXT DROP
	NEXT ; )

: INCCTRS
	TAGS @
	DUP  	$1F00 AND IF NSHLD 1+! THEN
	DUP  $3E000 AND IF NUP 1+! THEN
		 $7C0000 AND IF NSTIM 1+! THEN ;

( : EPROC
	NEV 1+!
	ALLTAGS@
	INCCTRS
	ACCEPT?
	IF	SENDEV
		EVASIDE @
		IF 	BSELL MUX0L
		ELSE	BSELH MUX0H
		THEN  DOEV
		ENERGY? IF DOEHIST THEN
		OFFEV? IF ACCUMWV THEN
		-1 EVPEND !
		NACCEPT 1+!
	ELSE
		NREJECT 1+!
	THEN ; )

: EPROC 
	( TIM@ 0= IF ) NEV 1+! DOEV ( THEN ) ;

: EVPON EVP ACTIVATE
	BEGIN 
			EVFLG @ 
			IF 
				EPROC ( PAUS2 ) URESET -INT
				0 EVFLG ! 0 RSFLG !
				RTIM@ DROP STIM@ DROP
				STIMFLG @ IF +STIM THEN +EVT 
			( ELSE
				RSFLG @ CPSEL @ AND
				IF -INT CPRESET +INT 0 RSFLG ! 
				THEN )
			THEN
		PAUSE
	AGAIN ;
: EVPOFF EVP HALT ;

: ZCNTRS ZOBITS ZCHIST ZTHIST 0 NEV ! ;

: WSEC 10 * TIMCNT @ + DTIMCNT ! BEGIN PAUSE DTIMCNT @ TIMCNT @ < UNTIL DROP ;

: -FRM g0@ $F7F AND g0! ;
: FRM 7 ASSIGN
	lda -IF -1 ELSE 0 THEN
	[ 15 ] G@ [ 10 ] G@
	F-ETIM ! F-ITIM !
	LD-ITIM ( CLR-ETIM CLR-IFRM )
		0 MSEC !
		SECCNT 1+!
		SECOND @ 1+ DUP 60 - 2*
		-IF 
			DROP stp
		ELSE
			DROP DROP 0 stp
			MINUTE @ 1+ DUP 60 - 2*
			-IF
			 	DROP stp
			ELSE
				DROP DROP 0 stp
				HOUR 1+!
			THEN
		THEN
	FRMCNT 1+!
	shl drop sta rti ;
: +FRM FRM g0@ $F7F AND $80 XOR g0! ;

: TIME. HOUR @ 3 U.R MINUTE @ 3 U.R SECOND @ 3 U.R MSEC @ 4 U.R ;
: TIMESET -TIM 0 MSEC ! 0 SECOND ! MINUTE ! HOUR ! +TIM ;

: VINIT VECTOR# 1- FOR $40000 I VECTORS ! NEXT ; VINIT
: VASSIGN anew HERE SWAP VECTORS ! ;
: VBLOCK ( n1 n2 -- )
	OVER - >R anew HERE SWAP VECTORS sta R> FOR DUP stp NEXT DROP ;
: +VASSIGN VSLOT @ VASSIGN VSLOT +! ;
: +VBLOCK 1- FOR VSLOT @ VASSIGN VSLOT 1+! NEXT ;
: VEXECUTE MSEC @ DUP VECTOR# < IF ELSE DROP 809 THEN VECTORS >R ;

: TLOG! - DUP MAXTIM @ < 
	IF DROP 
	ELSE 
		MAXTIM !
		MSEC @ MAXMSEC !
		SECOND @ MAXSEC !
	THEN ;

: STATUS@ 
	STIMFLG @ 1 AND
	SHLDREJ @ 2 AND XOR
	STATUS ! ;
: DORATES 
	[ 7 ] G@ [ 8 ] G@ [ 9 ] G@ 
	RG6 @ $FFFFFB AND DUP 4 XOR [ 6 ] G! OU6
	SHLDCNTS ! CZTCNTS ! LIVETIME ! ;
: MODHDR!
	$F0F1F2 MODHDR !
	SECCNT @ [ MODHDR 1+ ] ldi !
	LIVETIME @ [ MODHDR 2 + ] ldi !
	SHLDCNTS @ CZTCNTS @ RR8 XOR [ MODHDR 3 + ] ldi !
	NREJECT @ NACCEPT @ RR8 RR8 XOR STATUS @ RR8 XOR 
	[ MODHDR 4 + ] ldi ! 0 NACCEPT ! 0 NREJECT ! 
	NUP @ NSHLD @ RR8 RR8 XOR NEV @ RR8 XOR 
	[ MODHDR 5 + ] ldi ! 0 NUP ! 0 NSHLD ! 0 NEV !
	NBSIDE @ NASIDE @ RR8 RR8 XOR NSTIM @ RR8 XOR 
	[ MODHDR 6 + ] ldi ! 0 NASIDE ! 0 NBSIDE ! 0 NSTIM !
	0 NNONE @ RR8 RR8 XOR NBOTH @ RR8 XOR 
	[ MODHDR 7 + ] ldi ! 0 NNONE ! 0 NBOTH ! 
	CMDTABLE SECCNT @ DDLIM @ /MOD DROP + @
	[ MODHDR 8 + ] ldi ! ;

: VTASKS
	[ 1 VASSIGN ] 	-1 HTXPAUS ! EXIT
	[ 9 VASSIGN ] 	STATUS@ DORATES MODHDR! 0 HTXPAUS ! HTXDONE @ 0= IF ( +HTX  ) THEN EXIT ;

: MDUTIM [ 15 ] G@ VEXECUTE ETIM@ MSEC ! [ 15 ] G@ TLOG! ;

: TIMERON 4423076 ITIM! -INT +TIM +INT ;

: TGO1 0 RESCNT !
	10 10 LOOK ( +RES EVP BUILD ) FREQ @ FREQ! DT @ DT! T9 @ T9! T10 @ T10!
	( RECT-EN1 CMD! ) SW0H
	EVPON ( -1 CGON ! ) EINITH UPSELL RSTSEQ
	STIMLEN @ STIM! +STIM ( XDISCRL ) TRGENH +EVT ;

: EVON EVPON ( +RES ) STIMLEN @ STIM! +STIM +EVT ;
: EVOFF EVPOFF ( -RES ) -STIM -EVT ;
: PIXSEL EVOFF ALLOFF XYSEL EVON ;
: RECT-EN EVOFF RECT-EN1 CMD! EVON ;

EVP BUILD

: TGO2 0 RESCNT ! 3 DT! ( 4423076 ITIM! +TIM ) 44 FREQ!
	$7FFFFF ITIM! ADCCLKH
	0 INTADCEN ! -1 EXTADCEN ! 0 SCOPEN* !
	UPSELL UPREADH ( RDRSTH ) TRGENH ( XDISCRL )
	1 1 PIXSEL
	( -1 CGON ! )
	EVON ;

: GLOBALDC INIT 10 10 LOOK ALLON CMD! $FFFF NDAC! PAWZ
	DVM1DAT DVM2DAT DVM3DAT DVMPWR  ( DVMSCOPE ) ADCTEMP
	DVMDISC DVMVPL2 DVMVPL3 DVM4VREF DVMVNL1 DVMVNL2 
	4VSEL ?
	CR ." DONE " ;

6 . HERE .
